
Given 2n passengers and two cities A and B, find  the minimum cost to fly every person to a city such that exactly
n people arrive in each city.
Eg.

  0,1, 2, 3
A 1 5 10 15
B 7 4 20 30

ans= 7+4+10+15

A,B
1,7
5,4
10,20
15,30

Public int getMinimalCost(int[][] array){

Arrays.sort(array, new Comparator<int<> {
	compare(int[] A, int[] B){
		Return A[0]-A[1] - (B[0]-B[1]);
});


Int total=0;
	for(int i=0;i<array.length/2;i++){
	total+=array[i][0];
}

for(int i=n/2;i<array.length;i++){
	total+=array[i][1];
}

return total;

}





Q: Given an array chocolate of n non-negative integers, where the values are sweetness levels of the chocolate. You are
also given a value k which denotes the number of friends you will share this chocolate with. Your friends are greedy so
they will always take the highest sweetness chunk. Find out what is the maximum sweetness level you could get.
Eg.

n=4

1,2,1,1
3,1,1

k=3

1,2,2
3,1,1
1,3,1
1,2,1,1

ans=1

K=2
4,2,3,4,2,5,2

1 4,2,3,4
2 2,5,2

k=3
1
2
3


K=3
4,2,3,4,2,5,2
6,9,5,2


Pick the max: 5



K=3
4,2,4,5,2

6,4,7

Min, max → n*(max-min);

10000   → 1
	Next GreaterValue → max/2 → 550

4




7 9
8

Public int getMaxSweetness(int[] arr, int k){
	Int start=
	Int end =

	Int probableSweetness = getProbableValue(start, end);

	while(start<=end){
	Boolean isValid = isValidSweetness(probableSweetness, arr, k);
	if(isValid){
	probableSweetness = getProbableValue(probableSweetness, end);
}else{
		probableSweetness = getProbableValue(start,probableSweetness);

}
}

Return probableSweetness;

}


Public int getProbableValue(int start, int end){
	Return start+(end-start)/2;

}

4,2,4,5,2

6,4,7

Public boolean isValidSweetness(int probableSweetness, int[] arr,int k){
	Int sum=0;
	In count=0;
	for(int i=0;i<arr.length;i++){
		sum+=arr[i];
		if(sum>probableSweetness){
			count++;
	sum=0;
}
}

if(count>=k){
	Return true;
}

Return false;
}

LLD: Design cache system
HLD: Design Airport Display System
     Design online notification when a friend comes online/offline in chat apps recieve notification.