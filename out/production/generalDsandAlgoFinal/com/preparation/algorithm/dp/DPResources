https://www.freecodecamp.org/news/demystifying-dynamic-programming-3efafb8d4296/
https://codeforces.com/blog/entry/4C3256

https://leetcode.com/problems/maximum-profit-in-job-scheduling/
https://leetcode.com/problems/russian-doll-envelopes/

Design ThreadExecutor LLD


DP/Memo types:
    1. fibonacciNumbers: MinJumpsToReachEnd, Staircase, HouseTheif
    2. Knapsack 0/1 : Finite quantity, once taken cannot take it again.
        a. SubsetSum problem
        b. EqualSum partition problem
        c. countOfSubsetsSum with a given sum
        d. minSumDifference
    3. UnboundedKnapsack : infinte quantity of each type
    4. LongestCommonSubstring
    5. LongestCommonSubsequence



Memoisation: DFS based approach using top down traversal.

DP:
1. Dp is bottom-up approach, we first solve for all smaller subsets and build that to solve the problem.
2. From recursive approach, identify the changing parameters and create a table of (i+1)(k+1)
    where i represents using the i number of elements and the current element will be [i-1]
    ex i=0 in this table represent the 0 number of elements and not the 0th element of the input.

    hence i=1 means using 1 number of elements and the actual element will be at index 0, hence [i-1] [Most imp]

2. Be careful in terms of filling the base cases in DP.
3. final value will be found at dp[i+1][k+1]
