Usage:
Sliding Window pattern which is very useful to solve problems in which you are asked to find the longest/shortest string, subarray,
or a desired value which you need to calculate from subarrays.

Algo:
To be able to reuse the _sum from the previous subarray, we will subtract the element going out of the window(of size k if given) and
add the element now being included in the sliding window.

How to identify:
So we want to be able to identify the problems that sliding window pattern works.

^ The problem involves a data structure that is ordered and iterable like arrays, strings, etc.
^ The problem is asking to find a subrange in an array/string, contiguous longest, shortest, average or target value.
^ There is an apparent naive or brute force solution that runs in O(N2), O(2N) or some other large time complexity.
^ The amazing thing about sliding window problems is that most of the time they can be solved in O(N) time and O(1) space complexity.

EXAMPLE:
1. Kandane algorithm --> max subarray sum
    CircularKandane
    https://leetcode.com/problems/maximum-sum-circular-subarray/
2. Finding max avg of size k
3. maximum Subarray with equal number of 0 and 1.
4. https://leetcode.com/problems/longest-substring-without-repeating-character
5. https://leetcode.com/problems/minimum-size-subarray-sum/


Similar LeetCode ProblemsPermalink
LeetCode 3 - Longest Substring Without Repeating Characters [medium]
LeetCode 30 - Substring with Concatenation of All Words [hard]
LeetCode 76 - Minimum Window Substring [hard]
LeetCode 209 - Minimum Size Subarray Sum [medium]
LeetCode 424 - Longest Repeating Character Replacement [medium]
LeetCode 438 - Find All Anagrams in a String [medium]
LeetCode 567 - Permutation in String [medium]
LeetCode 904 - Fruit Into Baskets [medium]
LeetCode 1004 - Max Consecutive Ones III [medium]
